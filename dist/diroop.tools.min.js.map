{"version":3,"sources":["diroop.js","cache/schemaCache.js","config/diroopSettings.js","schemas/lists.js","schemas/loader.js","tv4/tv4Service.js","validation/validator.js","version/version.js","diroopSchemaCache.js","drTemplateCache.js"],"names":["ng","module","angular","factory","_schemaCache","$cacheFactory","_info","info","_put","uri","schema","_addUri","put","_get","get","_remove","remove","_removeUri","_removeAll","removeAll","_uris","_destroy","destroy","_getUris","schemaCache","hasKey","push","_","without","_hasKey","contains","_cache","JSON_SCHEMA_NAME_SPACE","getUris","provider","_settingsProvider","_drToolsSettings","_getVersion","_version","drToolsSettings","getVersion","_self","this","setVersion","version","$get","drSchemaListService","$q","$log","$filter","_search","text","num","_res","resolve","reject","length","_schemas","results","first","forEach","res","label","path","schemaListService","search","_drSchemaLoader","$http","drSchemaCache","drTv4Service","_getSchemaSet","getValidator","then","_tv4","recursiveFetch","url","_trys","MAX_SCHEMA_QUOTA","message","_loadSchemaUrl","_schema","_newTv4","addSchema","_missing","getMissingUris","getSchema","_originalUri","tv4","error","freshApi","TV4_INIT_EXCEPTION","innerError","_getCompleteSchemaSet","_getExpandedSchema","schemaSet","$ref","_expandSchemaSet","expandedSchema","SCHEMA_EXPANSION_EXCEPTION","handleSchema","refSchema","isBeingHandled","copy","TV4_SCHEMA_REQUEST_EXCEPTION","propname","prop","EXPANSION_ERROR","SCHEMA_SET_INTERFACE_ERROR","refreshCache","isDefined","CURRENT_URL_NOT_CACHED_EXCEPTION","drSchemaLoader","getSchemaSet","getExpandedSchema","tv","_drTv4Service","_getValidator","TV4_NOT_LOADED_EXCEPTION","_drValidationService","_validate","model","result","validateMultiple","valid","MODEL_VALIDATION_FAILED_MESSAGE","errors","missing","SCHEMA_INITIALIZATION_EXCEPTION","drValidationService","validate","directive","_drVersion","settings","_link","scope","elem","attrs","DIROOP_TOOL_VERSION","templateUrl","link","app","e","run","$schema","description","type","properties","post-office-box","extended-address","street-address","locality","region","postal-code","country-name","required","dependencies","latitude","longitude","fn","familyName","givenName","additionalName","items","honorificPrefix","honorificSuffix","nickname","format","email","value","tel","adr","geo","tz","photo","logo","sound","bday","title","role","org","organizationName","organizationUnit","$templateCache"],"mappings":"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","file":"diroop.tools.min.js","sourcesContent":["(function(ng){\n  'use strict';\n  /**\n      *@ngdoc overview\n      *@name diroop.tools\n      *@description\n          a module which provides basic validatiopn services using\n          Json schema and the TV4 validator\n   **/\n  //ng.module('diroop.tools',['diroop.tools.templateCache']);\n  ng.module('diroop.tools',['diroop.tools.templateCache','diroop.schema.cache','ui.format']);\n})(angular);\n","(function(ng,factory){\n  'use strict';\n  /**\n   * @ngdoc service\n   * @name drSchemaCache\n   *\n   * @description\n   * Adding via the `drSchemaCache` service:\n   *\n   * ```js\n   * var _app = angular.module('myApp', []);\n   * _app.run(function(drSchemaCache) {\n   *   drSchemaCache.put('sibling/siblingSchema.json', schemaJson);\n    });\n   * });\n   * ```\n   *  get it via the drSchemaCache service:\n   * ```js\n   *  drSchemaCache.get('sibling/siblingSchema.json');\n   * ```\n   */\n  factory('drSchemaCache',['$cacheFactory', _schemaCache]);\n  function _schemaCache($cacheFactory){\n    var JSON_SCHEMA_NAME_SPACE='drSchemaCache';\n    //define the interface\n    var schemaCache={\n      info:_info,\n      put:_put,\n      get:_get,\n      remove:_remove,\n      removeAll:_removeAll,\n      destroy : _destroy,\n      hasKey:_hasKey,\n      getUris:_getUris\n    };\n\n    var _cache=null,\n        _uris =[];\n\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.info\n      *\n      * @description\n      *  Used to request information about the schema cache\n      * @returns  a collections of informations relating to the cache-\n      *\n    */\n    function _info(){\n      return _schemaCache().info();\n    }\n\n\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.put\n      * @param {string} uri the key other schemas with use to request the cache\n      * @param {object} schema a schema adhering to\n      * @description\n\n      * @returns  the schema that was put into schema cache\n      *\n    */\n\n    function _put(uri,schema){\n      if(schema && uri){\n          //schema.id = key;\n          _addUri(uri);\n          _schemaCache().put(uri,schema);\n      }\n    }\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.get\n      * @param {string} uri the key other schemas with use to request the cache\n      * @description\n\n      * @returns  the schema that was put into schema cache\n      *\n    */\n\n\n    function _get(uri){\n      return _schemaCache().get(uri);\n    }\n\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.remove\n      * @param {string} uri the key other schemas with use to request the cache\n      * @description\n          removes the schema from cache\n      * @returns  null\n      *\n    */\n\n    function _remove(uri){\n      _schemaCache().remove(uri);\n      _removeUri(uri);\n    }\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.removeAll\n      * @description\n          removes all schema from cache\n      * @returns  null\n      *\n    */\n    function _removeAll(){\n      _schemaCache().removeAll();\n      _uris=[];\n    }\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.destroy\n      * @description\n          destroys cache\n      * @returns  null\n      *\n    */\n\n    function _destroy(){\n      _uris=[];\n      _schemaCache().destroy();\n    }\n\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.getUris\n      * @description\n          gets a list of cache uris\n      * @returns  returns a list of cache keys\n      *\n    */\n    function _getUris(){\n      return _uris;\n    }\n    /*private functions*/\n\n    // private add an uri to list\n    function _addUri(uri){\n      if(!schemaCache.hasKey(uri)){\n        _uris.push(uri);\n      }\n    }\n    // private remmove ori from list\n    function _removeUri(uri){\n      //see http://underscorejs.org/#without\n      _uris =_.without(_uris,uri);\n    }\n\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.hasKey\n      * @description\n          returns true if the cache is storing a schema at the uri\n      * @returns  boolean true if the uri is stored\n      *\n    */\n    function _hasKey(uri){\n      return _.contains(_uris,uri);\n    }\n\n    // a untility funtion used to initialize and return the cache when needed\n\n    function _schemaCache(){\n      if(!_cache){\n        _cache= $cacheFactory(JSON_SCHEMA_NAME_SPACE);\n      }\n      return _cache;\n    }\n\n    return schemaCache;\n  }\n})(angular, angular.module('diroop.tools').factory);\n","(function(ng,provider){\n  'use strict';\n\n  /**\n    * @ngdoc provider\n    * @name drToolsSettingsProvider\n    * @memberof diroop.tools\n    * @description\n    *  Provides a tools for setting and asking fro configuration settings\n    */\n\n var _settingsProvider=function(){\n    var _version ='1.0.0.1.x';\n    var _self = this;\n\n    _self.setVersion = function(version){\n      _version = version;\n    };\n\n    // the actuul factory\n    function _drToolsSettings(){\n      var drToolsSettings={\n        getVersion:_getVersion,\n      };\n      return drToolsSettings;\n      /**\n        * @ngdoc function\n        * @name drToolsSettings.getVersion\n        *\n        * @description\n        *  used to request access the diroop tools version\n        * @returns {string} version of diroop tools\n      */\n      function _getVersion(){\n        return _version;\n      }\n    }\n    _self.$get = [_drToolsSettings];\n  };\n  provider('drToolsSettings', [_settingsProvider]);\n})(angular,angular.module('diroop.tools').provider);\n","(function(ng,factory){\n  'use strict';\n  /**\n   * @ngdoc service\n   * @name drSchemaListService\n   * @memberof diroop.tools\n   * @requires $q                  - always return a promise\n   * @requires $log                - log errors\n   * @requires drSchemaCache\n                  as schemaCahe    - the schema cache\n   * @description\n        provides a collection of utilities to access the current list of cached\n        schemas.\n   */\n  factory('drSchemaListService',['$q','$log','$filter','drSchemaCache',drSchemaListService]);\n  function drSchemaListService($q,$log,$filter,schemaCache){\n     var schemaListService={\n       search:_search\n     };\n     return schemaListService;\n\n    function _search(text,num){\n      num = num||15;\n      var _res = [];\n      return $q(function(resolve,reject){\n         if(!(text&&text.length>1)){\n           resolve(_res);\n         }else{\n           var _schemas = schemaCache.getUris();\n           var results = _.first($filter('filter')(_schemas,text),num);\n           ng.forEach(results,function(res){\n             _res.push({\n               label:res,\n               path:res\n             });\n           });\n           resolve(_res);\n         }\n      });\n    }\n\n  }\n})(angular,angular.module('diroop.tools').factory);\n","(function(ng,factory){\n  'use strict';\n  /**\n   * @ngdoc service\n   * @name drSchemaLoader\n   * @memberof diroop.tools\n   * @requires $http               - to request information via http\n   * @requires $q                  - always return a promise\n   * @requires $log                - log errors\n   * @requires drSchemaCache       - the schema cache\n   * @requires drTv4Service        - need to tv4\n   * @description\n   *  the drSchemaLoader servive is used to request and expanded json schema\n   *  defined in accordance with the http://json-schema.org/latest/json-schema-core.html\n   */\n\n   factory('drSchemaLoader',['$http','$q','$log','drSchemaCache','drTv4Service',_drSchemaLoader]);\n   function _drSchemaLoader($http,$q,$log,drSchemaCache,drTv4Service){\n      var  CURRENT_URL_NOT_CACHED_EXCEPTION   = 'The current url does not have a a schema stored in drSchemaCache.',\n           MAX_SCHEMA_QUOTA_EXCEPTION         = 'Maximum Schema Quota has been exceeded.',\n           SCHEMA_EXPANSION_EXCEPTION         = 'An error occured expanded schema for uri.',\n           TV4_INIT_EXCEPTION                 = 'An error occured initializing tv4 during schema load.',\n           TV4_SCHEMA_REQUEST_EXCEPTION       = 'An error occured resolving a url from tv4',\n           EXPANSION_ERROR                    = 'An unspecified error resulted in a null schema.',\n           SCHEMA_SET_INTERFACE_ERROR         = 'The schema set did not meet the expected interfacte.',\n           MAX_SCHEMA_QUOTA                    = 10000;\n    // define the interface\n      var drSchemaLoader={\n          getSchemaSet: _getSchemaSet,\n          getExpandedSchema:_getExpandedSchema\n        };\n      /*returb the servic*/\n      return drSchemaLoader;\n     /**\n       * @ngdoc function\n       * @name drSchemaLoader.getSchemaSet\n       *\n       * @description\n       *  used to request a schema by its url and return the schema and a fresh tv4\n       *  api loaded with all the the schemas dependancies\n       * @param {string} uri of the schema being\n       * @returns  a promise to resolve a schema by its uri with a tv4 validator\n       *  loaded with all the schemas dependancies and reject if the schema or one\n       *  of its  dependancies is not able to be loaded or if a reference to tv4\n       *  is not available.\n     */\n     function _getSchemaSet(uri){\n       return $q(function(resolve,reject){\n             drTv4Service\n              .getValidator()\n              .then(function(_tv4){\n                 var _newTv4      = _tv4.freshApi(),\n                     _originalUri = uri,\n                     _trys        = 0;\n                recursiveFetch(uri);\n                /* recursive function*/\n                function recursiveFetch(url){\n                  _trys++;\n                  // drop out id schema quota exceeded\n                  if(_trys>MAX_SCHEMA_QUOTA){\n                   reject({\n                     message:'Maximum Schema Quota Exceeed'\n                   });\n                  }else{\n                    _loadSchemaUrl(url)\n                      .then(function(_schema){\n                        _newTv4.addSchema(url,_schema);\n                        var _missing = _newTv4.getMissingUris();\n                        if(_missing.length===0){\n                          resolve({\n                            schema:_newTv4.getSchema(_originalUri),\n                            tv4: _newTv4\n                          });\n                        }else{\n                          recursiveFetch(_missing[0]);\n                        }\n\n                      })\n                      .catch(function(error){\n                        reject(error);\n                      });\n                  }\n                }\n              })\n              .catch(function(error){\n                reject({\n                  message:TV4_INIT_EXCEPTION,\n                  innerError:error\n                });\n              });\n       });\n     }\n\n     //private function\n     /**\n       Loads all cached schemas into the tv4 validator\n    **/\n\n     function _getCompleteSchemaSet(){\n       return $q(function(resolve,reject){\n         drTv4Service\n          .getValidator()\n          .then(function(_tv4){\n            var _newTv4 = _tv4.freshApi();\n            ng.forEach(drSchemaCache.getUris(),function(uri){\n              _newTv4.addSchema(uri,drSchemaCache.get(uri));\n            });\n            resolve({\n              tv4:_newTv4,\n              schema:{}\n            });\n          })\n          .catch(function(error){\n            reject({\n              message:TV4_INIT_EXCEPTION,\n              innerError:error\n            });\n          });\n       });\n     }\n   /**\n     * @ngdoc function\n     * @name drSchemaLoader.getExpandedSchema\n     *\n     * @description\n     *  used to request a schema by its url and return the schema with all its\n        $ref being expanded.\n     * @param {string} uri of the schema being\n     * @returns  a promise to return an expanded schema\n   */\n\n     function _getExpandedSchema(uri){\n       return $q(function(resolve,reject){\n          _getCompleteSchemaSet(uri)\n            .then(function(schemaSet){\n                schemaSet.schema={\"$ref\":uri};\n                _expandSchemaSet(schemaSet)\n                .then(function(expandedSchema){\n                  resolve(expandedSchema);\n                }).catch(function(error){\n                  reject({\n                    message : SCHEMA_EXPANSION_EXCEPTION,\n                    uri :uri,\n                    innerError:error\n                  });\n                });\n            })\n            .catch(function(error){\n              reject({\n                message : SCHEMA_EXPANSION_EXCEPTION,\n                uri :uri,\n                innerError:error\n              });\n            });\n       });\n     }\n     /**\n       * @name _expandSchemaSet\n       *  private function\n       * @description\n       * using the supplied SchemaSet expand the all $refs\n       * @param {object} schemaSet  A bag containg the schema and a tv4 api\n          instance loaded with all dependencies.\n       * @returns  a promise to resolve a expanded schema\n     */\n     function _expandSchemaSet(schemaSet){\n       return $q(function(resolve,reject){\n         //local recursive function\n          function handleSchema(schema){\n            if(schema.$ref){\n             var refSchema = schemaSet.tv4.getSchema(schema.$ref);\n             if(!refSchema){\n                reject({\n                   message:TV4_SCHEMA_REQUEST_EXCEPTION,\n                   $ref:schema.$ref\n                 });\n                 return;\n             }else{\n               if(schema.isBeingHandled){\n                 return ng.copy(refSchema);\n               }\n               else\n               {\n                   schema.isBeingHandled = true;\n                   return handleSchema(ng.copy(refSchema));\n               }\n             }\n            }\n            for(var propname in schema)\n            {\n               var prop = schema[propname];\n               if(typeof prop === 'object')\n               {\n                   delete schema[propname];\n                   schema[propname] = handleSchema(prop);\n               }\n            }\n            return schema;\n          }\n          if(schemaSet && schemaSet.schema && schemaSet.tv4){\n            var _schema = handleSchema(ng.copy(schemaSet.schema));\n            if(_schema){\n              resolve(_schema);\n            }else{\n              reject({message:EXPANSION_ERROR});\n            }\n          }else{\n            reject({message:SCHEMA_SET_INTERFACE_ERROR});\n          }\n       });\n     }\n     /**\n       * @name _loadSchemaUrl\n       *  private function\n       * @description\n       *  used to request a schema by its url\n       *  presently only checks schema cache - will be modified to\n       *  to request resolveable urls which are not stored in schema cache\n       * @param {string} uri the url of the schema\n       * @param {boolean} refreshCache - if absolute rerequest and recache schema\n                                ****not implemented yet!!!!! *****\n       * @returns  a promise to resolve a schema by its uri\n     */\n     function _loadSchemaUrl(uri,refreshCache){\n       return $q(function(resolve,reject){\n         var _schema = drSchemaCache.get(uri);\n         if( ng.isDefined(_schema) && _schema!==null  ){\n           resolve(ng.copy(_schema));\n         }else{\n           // for now reject add call to absolute Http: $refs and storing them ins schemaCache using url as key\n           reject({\n             message : CURRENT_URL_NOT_CACHED_EXCEPTION,\n             uri : uri,\n           });\n         }\n       });\n     }\n   }\n\n\n\n\n\n\n})(angular,angular.module('diroop.tools').factory);\n","(function(ng,factory,tv){\n  'use strict';\n /**\n   * @ngdoc service\n   * @name drTv4Service\n   * @memberof diroop.tools\n   * @requires $q                 - always return a promise\n   * @requires $log               - need to log errors\n   * @description\n   *   Provides angular base access to tv4 validator\n   */\n  factory('drTv4Service',['$q','$log',_drTv4Service]);\n\n  function _drTv4Service($q,$log){\n    var TV4_NOT_LOADED_EXCEPTION = 'TV4 was not loaded. Insure tv4 is referenced.refer to https://github.com/geraintluff/tv4';\n\n    // define the interface\n    var drTv4Service={\n      getValidator : _getValidator\n    };\n\n    return drTv4Service;\n    /**\n      * @ngdoc function\n      * @name drTv4Service.getValidator\n      *\n      * @description\n      *  used to request access to the the tv4 globals\n      * @returns  a promise to resolve a reference to tv4.\n              resolves the promise if tv4 is load\n              rejects if not;\n    */\n    function  _getValidator(){\n      return $q(function(resolve,reject){\n        if(tv){\n          resolve(tv);\n        }else{\n          reject({\n            message:TV4_NOT_LOADED_EXCEPTION\n          });\n        }\n      });\n    }\n  }\n\n})(angular,angular.module('diroop.tools').factory,tv4);\n","/**\n  inject\n    angular as ng,\n    angular.module('diroop.tools').factory as factory\n   from global\n**/\n(function(ng,factory){\n  'use strict';\n  /**\n   * @ngdoc service\n   * @name drValidationService\n   * @memberof diroop.tools\n\n   * @requires $q                 - what service can live without $q\n   * @requires $log               - what service can live without $log\n   * @requires drSchemaLoader     - load schemas\n\n   * @description\n      provides a common libray for validating models aginst schemas\n  **/\n  factory('drValidationService',['$q','$log','drSchemaLoader',_drValidationService]);\n\n  function _drValidationService($q,$log,drSchemaLoader){\n      var MODEL_VALIDATION_FAILED_MESSAGE = 'The model did not validate aginst the schema specified',\n          SCHEMA_INITIALIZATION_EXCEPTION = 'An error occured while the schema was being set up for validation';\n\n      var drValidationService={\n        validate:_validate,\n      };\n\n      return drValidationService;\n      /**\n        * @ngdoc function\n        * @name sdrValidationService.validate\n        *\n        * @description\n          use a schema uri to validate a model\n        @param {string} schema - the path to the schema being used to validate\n        @param {object} model  - the model to be validated\n        * @returns  a promise to resolve true {valid:true} if the model validates or\n          an explaination why\n            {\n                valid:false,\n                message:'---',\n                errors:[...],\n                schema:{...},\n                model:{...},\n            }\n      */\n      function _validate(schema,model){\n        return $q(function(resolve,reject){\n          drSchemaLoader\n            .getSchemaSet(schema)\n            .then(function(schemaSet){\n                var result = schemaSet.tv4.validateMultiple(model, schemaSet.schema);\n                if(result && result.valid){\n                    resolve({\n                      valid:true\n                    });\n                }else{\n                    reject({\n                      valid   : false,\n                      message : MODEL_VALIDATION_FAILED_MESSAGE,\n                      errors  : (result.errors)?result.errors:[],\n                      missing : (result.missing)?result.missing:[],\n                      schema  : schema,\n                      model   : model\n                    });\n                }\n            })\n            .catch(function(error){\n                reject({\n                  message:SCHEMA_INITIALIZATION_EXCEPTION\n                });\n            });\n        });\n      }\n\n  }\n})(angular,angular.module('diroop.tools').factory);\n","(function(ng,directive){\n  'use strict';\n\n  /**\n   * @ngdoc directive\n   * @name drToolsVersion\n   * @memberof diroop.tools\n   * @requires $log                - can't live without $log\n   * @requires $filter             - provide access to json filter\n   * @requires drToolsSettings\n                  as settings       - provide access to app settings\n   * @restrict E\n   * @description\n        a directive used to display current diroop tools version\n   * @example\n      <ssatb:json:viewer entity=\"theObjectToBeDisplayed\" />\n  **/\n\n\n\n\n\n  directive('drToolVersion',['$log','$filter','drToolsSettings',_drVersion]);\n  function _drVersion($log,$filter,settings){\n    //@todo get from config\n\n    var DIROOP_TOOL_VERSION ='diroop.tools : v:version';\n\n    return {\n      templateUrl:'drTemplateCache:/version/version.html',\n      link :_link,\n    };\n\n    function _link(scope,elem,attrs){\n      scope.version = $filter('format')(DIROOP_TOOL_VERSION,{\n        version:settings.getVersion()\n      });\n    }\n\n  }\n\n})(angular,angular.module('diroop.tools').directive);\n","(function(ng) {\ntry {\n  app = ng.module('diroop.schema.cache');\n} catch (e) {\n  app = ng.module('diroop.schema.cache', ['diroop.tools']);\n}\napp.run(['drSchemaCache', function(schemaCache) {\n  schemaCache.put('schemaCache:/address/address.schema.json',\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"description\": \"An Address following the convention of http://microformats.org/wiki/hcard\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"post-office-box\": { \"type\": \"string\" },\n        \"extended-address\": { \"type\": \"string\" },\n        \"street-address\": { \"type\": \"string\" },\n        \"locality\":{ \"type\": \"string\" },\n        \"region\": { \"type\": \"string\" },\n        \"postal-code\": { \"type\": \"string\" },\n        \"country-name\": { \"type\": \"string\"}\n    },\n    \"required\": [\"locality\", \"region\", \"country-name\"],\n    \"dependencies\": {\n        \"post-office-box\": [\"street-address\"],\n        \"extended-address\": [\"street-address\"]\n    }\n}\n);\n}]);\n})(angular);\n\n(function(ng) {\ntry {\n  app = ng.module('diroop.schema.cache');\n} catch (e) {\n  app = ng.module('diroop.schema.cache', ['diroop.tools']);\n}\napp.run(['drSchemaCache', function(schemaCache) {\n  schemaCache.put('schemaCache:/geo/geo.schema.json',\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"description\": \"A geographical coordinate\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"latitude\": { \"type\": \"number\" },\n        \"longitude\": { \"type\": \"number\" }\n    }\n}\n);\n}]);\n})(angular);\n\n(function(ng) {\ntry {\n  app = ng.module('diroop.schema.cache');\n} catch (e) {\n  app = ng.module('diroop.schema.cache', ['diroop.tools']);\n}\napp.run(['drSchemaCache', function(schemaCache) {\n  schemaCache.put('schemaCache:/person/bad.schema.json',\n{\"$ref\":\"schemaCache:/noWhereToBeFoundOnPurpose.schema.json\"}\n);\n}]);\n})(angular);\n\n(function(ng) {\ntry {\n  app = ng.module('diroop.schema.cache');\n} catch (e) {\n  app = ng.module('diroop.schema.cache', ['diroop.tools']);\n}\napp.run(['drSchemaCache', function(schemaCache) {\n  schemaCache.put('schemaCache:/person/hcard.schema.json',\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"description\": \"A representation of a person, company, organization, or place\",\n    \"type\": \"object\",\n    \"required\": [\"familyName\", \"givenName\"],\n    \"properties\": {\n        \"fn\": {\n            \"description\": \"Formatted Name\",\n            \"type\": \"string\"\n        },\n        \"familyName\": { \"type\": \"string\" },\n        \"givenName\": { \"type\": \"string\" },\n        \"additionalName\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"honorificPrefix\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"honorificSuffix\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"nickname\": { \"type\": \"string\" },\n        \"url\": { \"type\": \"string\", \"format\": \"uri\" },\n        \"email\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": { \"type\": \"string\" },\n                \"value\": { \"type\": \"string\", \"format\": \"email\" }\n            }\n        },\n        \"tel\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": { \"type\": \"string\" },\n                \"value\": { \"type\": \"string\", \"format\": \"phone\" }\n            }\n        },\n        \"adr\": { \"$ref\": \"schemaCache:/address/address.schema.json\" },\n        \"geo\": { \"$ref\": \"schemaCache:/geo/geo.schema.json\" },\n        \"tz\": { \"type\": \"string\" },\n        \"photo\": { \"type\": \"string\" },\n        \"logo\": { \"type\": \"string\" },\n        \"sound\": { \"type\": \"string\" },\n        \"bday\": { \"type\": \"string\", \"format\": \"date\" },\n        \"title\": { \"type\": \"string\" },\n        \"role\": { \"type\": \"string\" },\n        \"org\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"organizationName\": { \"type\": \"string\" },\n                \"organizationUnit\": { \"type\": \"string\" }\n            }\n        }\n    }\n}\n);\n}]);\n})(angular);\n","(function(module) {\ntry {\n  module = angular.module('diroop.tools.templateCache');\n} catch (e) {\n  module = angular.module('diroop.tools.templateCache', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('drTemplateCache:/version/version.html',\n    '<div class=\"dr-version\"><small>{{version}}</small></div>');\n}]);\n})();\n"]}
{"version":3,"sources":["diroop.js","config/diroopSettings.js","cache/cacheTree.js","cache/schemaCache.js","extentions/string-extentions.js","schemas/lists.js","schemas/loader.js","tv4/tv4Service.js","validation/validator.js","version/version.js","diroopSchemaCache.js","drTemplateCache.js"],"names":["ng","module","angular","provider","_settingsProvider","_drToolsSettings","_getVersion","_version","drToolsSettings","getVersion","_self","this","setVersion","version","$get","factory","_cacheTreeService","$log","$q","$document","schemaCache","_getTree","resolve","reject","_addUri","uri","_addPath","then","tree","_uris","shift","length","_treeRoot","error","copy","DEFAULT_TREE_ROOT","getUris","path","_parsed","_parsePath","_addParsedPath","message","parsedPath","protocol","_getProtocolNode","protocolNode","addPath","segments","_getFolder","parent","isArray","_folderName","nodes","_createFolderNode","folderNode","push","segements","folderName","folderSegments","FolderNode","name","folder","nfolder","type","FOLDER_NODE_TYPE","SchemaNode","SCHEMA_NODE_TYPE","$ref","schema","when","endsWith","_Fn","_createNewProtocol","ProtocolNode","PROTOCOL_NODE_TYPE","pn","parser","document","createElement","href","_segments","parts","pathname","split","forEach","part","pathName","ROOT_NODE_TYPE","cacheTreeService","getTree","_schemaCache","$cacheFactory","_info","info","_put","put","_get","get","_remove","remove","_removeUri","_removeAll","removeAll","_destroy","destroy","_getUris","hasKey","_","without","_hasKey","contains","_cache","JSON_SCHEMA_NAME_SPACE","String","prototype","searchString","position","subjectString","toString","isFinite","Math","floor","lastIndex","lastIndexOf","drSchemaListService","$filter","_search","text","num","_res","_schemas","results","first","res","label","schemaListService","search","_drSchemaLoader","$http","drSchemaCache","drTv4Service","_getSchemaSet","getValidator","_tv4","recursiveFetch","url","_trys","MAX_SCHEMA_QUOTA","MAX_SCHEMA_QUOTA_EXCEPTION","_loadSchemaUrl","_schema","_newTv4","addSchema","_missing","getMissingUris","getSchema","_originalUri","tv4","freshApi","TV4_INIT_EXCEPTION","innerError","_getCompleteSchemaSet","_getExpandedSchema","schemaSet","_expandSchemaSet","expandedSchema","SCHEMA_EXPANSION_EXCEPTION","handleSchema","refSchema","isBeingHandled","TV4_SCHEMA_REQUEST_EXCEPTION","propname","prop","EXPANSION_ERROR","SCHEMA_SET_INTERFACE_ERROR","refreshCache","isDefined","CURRENT_URL_NOT_CACHED_EXCEPTION","drSchemaLoader","getSchemaSet","getExpandedSchema","tv","_drTv4Service","_getValidator","TV4_NOT_LOADED_EXCEPTION","_drValidationService","_validate","model","result","validateMultiple","valid","MODEL_VALIDATION_FAILED_MESSAGE","errors","missing","SCHEMA_INITIALIZATION_EXCEPTION","drValidationService","validate","component","templateUrl","controller","settings","drCacheTreeService","DIROOP_TOOL_VERSION","app","e","run","$schema","description","properties","post-office-box","extended-address","street-address","locality","region","postal-code","country-name","required","dependencies","fn","familyName","givenName","additionalName","items","honorificPrefix","honorificSuffix","nickname","format","email","value","tel","adr","geo","tz","photo","logo","sound","bday","title","role","org","organizationName","organizationUnit","latitude","longitude","$templateCache"],"mappings":"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","file":"diroop.tools.min.js","sourcesContent":["(function(ng){\n  'use strict';\n  /**\n      *@ngdoc overview\n      *@name diroop.tools\n      *@description\n          a module which provides basic validatiopn services using\n          Json schema and the TV4 validator.\n   **/\n\n\n\n  ng.module('diroop.tools',['diroop.tools.templateCache','diroop.schema.cache','ui.format']);\n})(angular);\n","// inject angular as ng\n// inject gular.module('diroop.tools').provider as provider\n(function(ng,provider){\n  'use strict';\n  /**\n    * @ngdoc provider\n    * @name drToolsSettingsProvider\n    * @memberof diroop.tools\n    * @description\n    *  Provides a tools for setting and asking for configuration settings\n    */\n\n var _settingsProvider=function(){\n   //the default version\n    var _version ='1.0.0.1.x';\n    //use _self as a reference to the current instance\n    var _self = this;\n    /**\n     * @name drToolsSettings.setVersion\n     * @module diroop.tools\n     * @description\n     *  set the current version of diroop.tools\n\n     * @param {version} string the string value for the version of diroop.tools\n     */\n    _self.setVersion = function(version){\n      // set the version to the string\n      _version = version;\n    };\n    // the actual factory retyurn by the provider\n    function _drToolsSettings(){\n      // define the interface to be exposed\n      var drToolsSettings={\n        getVersion:_getVersion,\n      };\n      return drToolsSettings;\n      /**\n        * @ngdoc function\n        * @name drToolsSettings.getVersion\n        * @module diroop.tools\n        * @description\n        *  used to request access the diroop tools version\n        * @returns {string} version of diroop tools\n      */\n      function _getVersion(){\n        return _version;\n      }\n    }\n    _self.$get = [_drToolsSettings];\n  };\n  provider('drToolsSettings', [_settingsProvider]);\n})(angular,angular.module('diroop.tools').provider);\n","(function(ng,factory){\n    'use strict';\n  /**\n   * @ngdoc service\n   * @name drCacheTreeService\n   * @requires $log              it was a hard $log back to base camp.\n   * @requires $q                promises must be kept.\n   * @requires $document         using $document path parsing abilities\n   * @requires drSchemaCache     needs to know all schemas cached.\n\n   * @description\n      Reads the scheam cache and parses it into a tree of nodes so that it can\n      be represent as a abstract file system with the schama placed in folderSegments\n   */\n\n  factory('drCacheTreeService',['$log', '$q','$document','drSchemaCache', _cacheTreeService]);\n  function _cacheTreeService($log,$q,$document,schemaCache){\n    var PROTOCOL_NODE_TYPE    ='PROTOCOL_NODE_TYPE',\n        FOLDER_NODE_TYPE      ='FOLDER_NODE_TYPE',\n        SCHEMA_NODE_TYPE      ='SCHEMA_NODE_TYPE',\n        ROOT_NODE_TYPE        ='$TREE_ROOT_NODE',\n        DEFAULT_TREE_ROOT     ={\n          name:'$cacheroot',\n          nodes:[],\n          type:ROOT_NODE_TYPE\n        },\n        _treeRoot=ng.copy(DEFAULT_TREE_ROOT),\n        cacheTreeService ={\n          addPath:_addPath,\n          getTree:_getTree,\n        };\n    return cacheTreeService;\n\n    /**\n      * @ngdoc function\n      * @name drCacheTreeService.getTree\n      *\n      * @description\n      *  parses the schema cache and produces a tree node\n      *  representation  of the cache so that the cache can pre represented\n      *  as an abstarct file system\n      * @returns a promise to resolve the contructed tree or reject with an error\n      * decribing the reason for failure\n      *\n    */\n    function _getTree(){\n      return $q(function(resolve,reject){\n        _treeRoot=ng.copy(DEFAULT_TREE_ROOT);\n        var _uris = ng.copy(schemaCache.getUris());\n        function _addUri(uri){\n            if(uri){\n              _addPath(uri)\n                .then(function(tree){\n                  _uris.shift();\n                  if(_uris.length===0){\n                      resolve(_treeRoot);\n                  }else{\n                    _addUri(_uris[0]);\n                  }\n                })\n                .catch(function(error){\n                  reject(error);\n                });\n            }else{\n              resolve(_treeRoot);\n            }\n        }\n        _addUri(_uris[0]);\n      });\n    }\n\n    /**\n      * @ngdoc function\n      * @name _addpath\n      *\n      * @description\n      ?\n\n      * @returns a promise to resolve the contructed tree or reject with an error\n      * decribing the reason for failure\n      *\n    */\n\n    function _addPath(path){\n      return $q(function(resolve,reject){\n        if(!path){\n          reject({\n            message:'no path specified'\n          });\n        }else{\n          var _parsed=_parsePath(path);\n          _addParsedPath(_parsed)\n            .then(function(tree){\n              resolve(tree);\n            })\n            .catch(function(error){\n              reject({\n                message:'an error occured add parsed path',\n                path:_parsed,\n                error:error\n              });\n            });\n        }\n      });\n    }\n\n    function _addParsedPath(parsedPath){\n      return $q(function(resolve,reject){\n        if(parsedPath && parsedPath.protocol){\n          _getProtocolNode(parsedPath)\n            .then(function(protocolNode){\n              protocolNode\n                .addPath(parsedPath.segments)\n                .then(function(tree){\n                  resolve(tree);\n                })\n                .catch(function(error){\n                  reject({\n                    message:\" pn add path error\",\n                    error:error\n                  });\n                });\n            })\n            .catch(function(error){\n              reject({\n                message:\"get pn error\",\n                error:error\n\n              });\n            });\n        }else{\n          reject({\n            message:'malformed Parsed Path',\n            parsedPath:parsedPath\n          });\n        }\n      });\n    }\n\n    function _getFolder(parent,segments){\n      return $q(function(resolve,reject){\n        if(parent){\n          if(ng.isArray(segments)&&segments.length>0){\n            var _folderName = segments[0];\n            if(parent.nodes[_folderName]){\n              resolve(parent.nodes[_folderName]);\n            }else{\n              _createFolderNode(_folderName,segments)\n                .then(function(folderNode){\n                  parent.nodes[_folderName] = folderNode;\n                  parent.nodes.push(folderNode)\n                  resolve(parent.nodes[_folderName]);\n                })\n                .catch(function(error){\n                  reject(error);\n                });\n            }\n          }else{\n            reject({\n              message:'malformed path segments being added to parent',\n              segments:segements,\n              parent:parent\n            });\n          }\n        }else{\n          reject({\n            message:'parent node not specified'\n          });\n        }\n      });\n    }\n\n    function _createFolderNode(folderName,folderSegments){\n\n      var FolderNode = function(name){\n        var _self= this;\n        _self.name       = name;\n        _self.nodes      = [];\n        _self.addPath    = _addPath;\n        _self.type       = FOLDER_NODE_TYPE;\n\n        function _addPath(segments){\n          return $q(function(resolve,reject){\n            if(ng.isArray(segments)&&segments.length>0){\n              _getFolder(_self,segments)\n                .then(function(folder){\n                  segments.shift();\n                  folder\n                    .addPath(segments)\n                    .then(function(nfolder){\n                      resolve(_self);\n                    })\n                    .catch(function(error){\n                      resolve(_self);\n                    });\n                })\n                .catch(function(error){\n                  resolve(_self);\n                });\n            }else{\n              resolve(_self);\n            }\n          });\n        }\n\n      };\n\n      var SchemaNode=function(name){\n        var _self = this;\n        _self.type= SCHEMA_NODE_TYPE\n        _self.$ref=name;\n        _self.schema=null;\n        _self.addPath = function(){\n          return $q.when(_self);\n        };\n\n      };\n\n\n\n      return $q(function(resolve,reject){\n        if((folderName||'').endsWith('.schema.json')||folderSegments.length===1){\n          resolve(new SchemaNode(folderName));\n        }else{\n          var _Fn = new FolderNode(folderName);\n          folderSegments.shift();\n          _Fn.addPath(folderSegments)\n            .then(function(){\n                resolve(_Fn);\n            })\n            .catch(function(error){\n                resolve(_Fn);\n            });\n        }\n      });\n    }\n\n    function _createNewProtocol(parsedPath){\n      var ProtocolNode = function(protocol){\n        var _protocol    = protocol,\n            _self        = this;\n        _self.name       = protocol;\n        _self.type       = PROTOCOL_NODE_TYPE;\n        _self.nodes      = [];\n        _self.addPath    = _addPath;\n        function _addPath(segments){\n          return $q(function(resolve,reject){\n            if(ng.isArray(segments)&&segments.length>0){\n              _getFolder(_self,segments)\n                .then(function(folder){\n                  segments.shift();\n                  folder\n                    .addPath(segments)\n                    .then(function(nfolder){\n                      resolve(_self);\n                    })\n                    .catch(function(error){\n                      resolve(_self);\n                    });\n                })\n                .catch(function(error){\n                  resolve(_self);\n                });\n            }else{\n              resolve(_self);\n            }\n          });\n        }\n\n      };\n      //return new ProtocolNode(parsedPath.protocol);\n      return $q.when(new ProtocolNode(parsedPath.protocol));\n    }\n    function _getProtocolNode(parsedPath){\n      return $q(function(resolve,reject){\n\n\n        if(_treeRoot.nodes[parsedPath.protocol]){\n          resolve(_treeRoot.nodes[parsedPath.protocol]);\n        }else{\n           _createNewProtocol(parsedPath)\n           .then(function(pn){\n             _treeRoot.nodes[parsedPath.protocol] = pn;\n            _treeRoot.nodes.push(pn);\n            resolve(_treeRoot.nodes[parsedPath.protocol]);\n           })\n           .catch(function(error){\n             reject({\n               message:'an error occcuer creating new protocol node',\n               error:error\n             });\n           });\n        }\n      });\n    }\n    function _parsePath(path){\n      if(!path)return null;\n      var parser = document.createElement('a');\n      parser.href =path;\n      var _segments=[];\n      var parts = (parser.pathname||'').split('/');\n      ng.forEach(parts,function(part){\n        if(part){\n          _segments.push(part);\n        }\n      });\n      return{\n        protocol:(parser.protocol||'').split(':')[0],\n        pathName:parser.pathname,\n        segments:_segments,\n        path:path\n      };\n    }\n\n}\n\n})(angular,angular.module('diroop.tools').factory);\n","(function(ng,factory){\n  'use strict';\n  /**\n   * @ngdoc service\n   * @name drSchemaCache\n   *\n   * @description\n   * Adding via the `drSchemaCache` service:\n   *\n   * ```js\n   * var _app = angular.module('myApp', []);\n   * _app.run(function(drSchemaCache) {\n   *   drSchemaCache.put('sibling/siblingSchema.json', schemaJson);\n    });\n   * });\n   * ```\n   *  get it via the drSchemaCache service:\n   * ```js\n   *  drSchemaCache.get('sibling/siblingSchema.json');\n   * ```\n   */\n  factory('drSchemaCache',['$cacheFactory',  _schemaCache]);\n  function _schemaCache($cacheFactory){\n    var JSON_SCHEMA_NAME_SPACE='drSchemaCache';\n    //define the interface\n    var schemaCache={\n      info:_info,\n      put:_put,\n      get:_get,\n      remove:_remove,\n      removeAll:_removeAll,\n      destroy : _destroy,\n      hasKey:_hasKey,\n      getUris:_getUris,\n    };\n\n    var _cache=null,\n        _uris =[],\n        _cacheTree = null;\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.info\n      *\n      * @description\n      *  Used to request information about the schema cache\n      * @returns  a collections of informations relating to the cache-\n      *\n    */\n    function _info(){\n      return _schemaCache().info();\n    }\n\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.put\n      * @param {string} uri the key other schemas with use to request the cache\n      * @param {object} schema a schema adhering to\n      * @description\n\n      * @returns  the schema that was put into schema cache\n      *\n    */\n\n    function _put(uri,schema){\n\n      if(schema && uri){\n          //schema.id = key;\n          _addUri(uri);\n          _schemaCache().put(uri,schema);\n      }\n\n    }\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.get\n      * @param {string} uri the key other schemas with use to request the cache\n      * @description\n\n      * @returns  the schema that was put into schema cache\n      *\n    */\n\n\n    function _get(uri){\n\n      return _schemaCache().get(uri);\n    }\n\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.remove\n      * @param {string} uri the key other schemas with use to request the cache\n      * @description\n          removes the schema from cache\n      * @returns  null\n      *\n    */\n\n    function _remove(uri){\n      _schemaCache().remove(uri);\n      _removeUri(uri);\n    }\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.removeAll\n      * @description\n          removes all schema from cache\n      * @returns  null\n      *\n    */\n    function _removeAll(){\n      _schemaCache().removeAll();\n      _uris=[];\n    }\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.destroy\n      * @description\n          destroys cache\n      * @returns  null\n      *\n    */\n\n    function _destroy(){\n      _uris=[];\n      _schemaCache().destroy();\n    }\n\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.getUris\n      * @description\n          gets a list of cache uris\n      * @returns  returns a list of cache keys\n      *\n    */\n    function _getUris(){\n      return _uris;\n    }\n    /*private functions*/\n\n    // private add an uri to list\n    function _addUri(uri){\n      if(!schemaCache.hasKey(uri)){\n        _uris.push(uri);\n      }\n    }\n    // private remmove ori from list\n    function _removeUri(uri){\n      //see http://underscorejs.org/#without\n      _uris =_.without(_uris,uri);\n    }\n\n\n    /**\n      * @ngdoc function\n      * @name drSchemaCache.hasKey\n      * @description\n          returns true if the cache is storing a schema at the uri\n      * @returns  boolean true if the uri is stored\n      *\n    */\n    function _hasKey(uri){\n      return _.contains(_uris,uri);\n    }\n\n    // a untility funtion used to initialize and return the cache when needed\n    function _schemaCache(){\n      if(!_cache){\n        _cache= $cacheFactory(JSON_SCHEMA_NAME_SPACE);\n      }\n      return _cache;\n    }\n\n    return schemaCache;\n  }\n})(angular, angular.module('diroop.tools').factory);\n","(function(){\n  /** extend the Javascript string object to have an endsWith method\n  if the version of javascript  does not have the method on the string object\n **/\n    if (!String.prototype.endsWith) {\n      // IIF the sdtring object does not have an endsWith method\n      // use js Prototype to extend the String class with the method endwith\n\n\n      String.prototype.endsWith = function(searchString, position) {\n          var subjectString = this.toString();\n          if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n            position = subjectString.length;\n          }\n          position -= searchString.length;\n          var lastIndex = subjectString.lastIndexOf(searchString, position);\n          return lastIndex !== -1 && lastIndex === position;\n      };\n    }\n})();\n","(function(ng,factory){\n  'use strict';\n  /**\n   * @ngdoc service\n   * @name drSchemaListService\n   * @memberof diroop.tools\n   * @requires $q                  - always return a promise\n   * @requires $log                - $log, $wog, $pollywog, $frog\n   * @requires $filter             - used to accesse angular filtes\n   * @requires drSchemaCache\n                  as schemaCahe    - the schema cache\n   * @description\n        provides a collection of utilities to access the current list of cached\n        schemas.\n   */\n  factory('drSchemaListService',['$q','$log','$filter','drSchemaCache',drSchemaListService]);\n  function drSchemaListService($q,$log,$filter,schemaCache){\n     var schemaListService={\n       search:_search\n     };\n     return schemaListService;\n\n    function _search(text,num){\n      num = num||15;\n      var _res = [];\n      return $q(function(resolve,reject){\n         if(!(text&&text.length>1)){\n           resolve(_res);\n         }else{\n           var _schemas = schemaCache.getUris();\n           var results = _.first($filter('filter')(_schemas,text),num);\n           ng.forEach(results,function(res){\n             _res.push({\n               label:res,\n               path:res\n             });\n           });\n           resolve(_res);\n         }\n      });\n    }\n\n  }\n})(angular,angular.module('diroop.tools').factory);\n","// inject angular as ng\n// inject angular.module('diroop.tools').factory as factory\n(function(ng,factory){\n  //closure\n  'use strict';\n  /**\n   * @ngdoc service\n   * @name drSchemaLoader\n   * @memberof diroop.tools\n   * @requires $http               - to request information via http\n   * @requires $q                  - always return a promise\n   * @requires $log                - $log errors - never use alert or console.log\n   * @requires drSchemaCache       - the schema cache\n   * @requires drTv4Service        - needed to wrap tv4 in an angular service\n   * @description\n   *  the drSchemaLoader servive is used to request and expanded json schema\n   *  defined in accordance with the http://json-schema.org/latest/json-schema-core.html\n   */\n   factory('drSchemaLoader',['$http','$q','$log','drSchemaCache','drTv4Service',_drSchemaLoader]);\n\n   function _drSchemaLoader($http,$q,$log,drSchemaCache,drTv4Service){\n     // define the revealing module\n     // define constants -\n      var  CURRENT_URL_NOT_CACHED_EXCEPTION   = 'The current url does not have a a schema stored in drSchemaCache.',\n           MAX_SCHEMA_QUOTA_EXCEPTION         = 'Maximum Schema Quota has been exceeded.',\n           SCHEMA_EXPANSION_EXCEPTION         = 'An error occured expanded schema for uri.',\n           TV4_INIT_EXCEPTION                 = 'An error occured initializing tv4 during schema load.',\n           TV4_SCHEMA_REQUEST_EXCEPTION       = 'An error occured resolving a url from tv4',\n           EXPANSION_ERROR                    = 'An unspecified error resulted in a null schema.',\n           SCHEMA_SET_INTERFACE_ERROR         = 'The schema set did not meet the expected interfacte.',\n           MAX_SCHEMA_QUOTA                    = 10000;// the maximum numbers of schemas that can be fetched used to prevent infinite recursion\n    // define the interface\n      var drSchemaLoader={\n          getSchemaSet: _getSchemaSet,\n          getExpandedSchema:_getExpandedSchema\n        };\n      /*returb the servic*/\n      return drSchemaLoader;\n     /**\n       * @ngdoc function\n       * @name drSchemaLoader.getSchemaSet\n       *\n       * @description\n       *  used to request a schema by its url and return the schema and a fresh tv4\n       *  api loaded with all the the schemas dependancies\n       * @param {string} uri of the schema being\n       * @returns  a promise to resolve a schema by its uri with a tv4 validator\n       *  loaded with all the schemas dependancies and reject if the schema or one\n       *  of its  dependancies is not able to be loaded or if a reference to tv4\n       *  is not available.\n     */\n     function _getSchemaSet(uri){\n       return $q(function(resolve,reject){\n             drTv4Service\n              .getValidator() // returns the current inject validator via promise\n              .then(function(_tv4){\n                // if tv4 is linked then a pointer to validator will be returned\n                 var _newTv4      = _tv4.freshApi(),// get a new instance w/o schemas loaded\n                     _originalUri = uri,\n                     _trys        = 0;\n                recursiveFetch(uri);// execute recursice function\n                /* recursive function*/\n                function recursiveFetch(url){\n                  _trys++;\n                  // drop out id schema quota exceeded this\n                  if(_trys>MAX_SCHEMA_QUOTA){\n                    //reject the promise\n                   reject({\n                     message:MAX_SCHEMA_QUOTA_EXCEPTION\n                   });\n                  }else{\n                    _loadSchemaUrl(url)\n                      .then(function(_schema){\n                        _newTv4.addSchema(url,_schema);\n                        var _missing = _newTv4.getMissingUris();\n                        if(_missing.length===0){\n                          resolve({\n                            schema:_newTv4.getSchema(_originalUri),\n                            tv4: _newTv4\n                          });\n                        }else{\n                          recursiveFetch(_missing[0]);\n                        }\n                      })\n                      .catch(function(error){\n                        reject(error);\n                      });\n                  }\n                }\n              })\n              .catch(function(error){\n                reject({\n                  message:TV4_INIT_EXCEPTION,\n                  innerError:error\n                });\n              });\n       });\n     }\n\n     //private function\n     /**\n       Loads all cached schemas into the tv4 validator\n    **/\n\n     function _getCompleteSchemaSet(){\n       return $q(function(resolve,reject){\n         drTv4Service\n          .getValidator()\n          .then(function(_tv4){\n            var _newTv4 = _tv4.freshApi();\n            ng.forEach(drSchemaCache.getUris(),function(uri){\n              _newTv4.addSchema(uri,drSchemaCache.get(uri));\n            });\n            resolve({\n              tv4:_newTv4,\n              schema:{}\n            });\n          })\n          .catch(function(error){\n            reject({\n              message:TV4_INIT_EXCEPTION,\n              innerError:error\n            });\n          });\n       });\n     }\n   /**\n     * @ngdoc function\n     * @name drSchemaLoader.getExpandedSchema\n     *\n     * @description\n     *  used to request a schema by its url and return the schema with all its\n        $ref being expanded.\n     * @param {string} uri of the schema being loaded\n     * @returns  a promise to return an expanded schema\n   */\n\n     function _getExpandedSchema(uri){\n       return $q(function(resolve,reject){\n          _getCompleteSchemaSet(uri)\n            .then(function(schemaSet){\n                schemaSet.schema={\"$ref\":uri};\n                _expandSchemaSet(schemaSet)\n                .then(function(expandedSchema){\n                  resolve(expandedSchema);\n                }).catch(function(error){\n                  reject({\n                    message : SCHEMA_EXPANSION_EXCEPTION,\n                    uri :uri,\n                    innerError:error\n                  });\n                });\n            })\n            .catch(function(error){\n              reject({\n                message : SCHEMA_EXPANSION_EXCEPTION,\n                uri :uri,\n                innerError:error\n              });\n            });\n       });\n     }\n     /**\n       * @name _expandSchemaSet\n       *  private function\n       * @description\n       * using the supplied SchemaSet expand the all $refs\n       * @param {object} schemaSet  A bag containg the schema and a tv4 api\n          instance loaded with all dependencies.\n       * @returns  a promise to resolve a expanded schema\n     */\n     function _expandSchemaSet(schemaSet){\n       return $q(function(resolve,reject){\n         //local recursive function\n          function handleSchema(schema){\n            if(schema.$ref){\n             var refSchema = schemaSet.tv4.getSchema(schema.$ref);\n             if(!refSchema){\n                reject({\n                   message:TV4_SCHEMA_REQUEST_EXCEPTION,\n                   $ref:schema.$ref\n                 });\n                 return;\n             }else{\n               if(schema.isBeingHandled){\n                 return ng.copy(refSchema);\n               }\n               else\n               {\n                   schema.isBeingHandled = true;\n                   return handleSchema(ng.copy(refSchema));\n               }\n             }\n            }\n            for(var propname in schema)\n            {\n               var prop = schema[propname];\n               if(typeof prop === 'object')\n               {\n                   delete schema[propname];\n                   schema[propname] = handleSchema(prop);\n               }\n            }\n            return schema;\n          }\n          if(schemaSet && schemaSet.schema && schemaSet.tv4){\n            var _schema = handleSchema(ng.copy(schemaSet.schema));\n            if(_schema){\n              resolve(_schema);\n            }else{\n              reject({message:EXPANSION_ERROR});\n            }\n          }else{\n            reject({message:SCHEMA_SET_INTERFACE_ERROR});\n          }\n       });\n     }\n     /**\n       * @name _loadSchemaUrl\n       *  private function\n       * @description\n       *  used to request a schema by its url\n       *  presently only checks schema cache - will be modified to\n       *  to request resolveable urls which are not stored in schema cache\n       * @param {string} uri the url of the schema\n       * @param {boolean} refreshCache - if absolute rerequest and recache schema\n                                ****not implemented yet!!!!! *****\n       * @returns  a promise to resolve a schema by its uri\n     */\n     function _loadSchemaUrl(uri,refreshCache){\n       return $q(function(resolve,reject){\n         var _schema = drSchemaCache.get(uri);\n         if( ng.isDefined(_schema) && _schema!==null  ){\n           resolve(ng.copy(_schema));\n         }else{\n           // for now reject add call to absolute Http: $refs and storing them ins schemaCache using url as key\n           reject({\n             message : CURRENT_URL_NOT_CACHED_EXCEPTION,\n             uri : uri,\n           });\n         }\n       });\n     }\n   }\n\n\n\n\n\n\n})(angular,angular.module('diroop.tools').factory);\n","(function(ng,factory,tv){\n  'use strict';\n /**\n   * @ngdoc service\n   * @name drTv4Service\n   * @memberof diroop.tools\n   * @requires $q                 - always return a promise\n   * @requires $log               - need to log errors\n   * @description\n   *   Provides angular base access to tv4 validator\n   */\n  factory('drTv4Service',['$q','$log',_drTv4Service]);\n\n  function _drTv4Service($q,$log){\n    var TV4_NOT_LOADED_EXCEPTION = 'TV4 was not loaded. Insure tv4 is referenced.refer to https://github.com/geraintluff/tv4';\n\n    // define the interface\n    var drTv4Service={\n      getValidator : _getValidator\n    };\n\n    return drTv4Service;\n    /**\n      * @ngdoc function\n      * @name drTv4Service.getValidator\n      *\n      * @description\n      *  used to request access to the the tv4 globals\n      * @returns  a promise to resolve a reference to tv4.\n              resolves the promise if tv4 is load\n              rejects if not;\n    */\n    function  _getValidator(){\n      return $q(function(resolve,reject){\n        if(tv){\n          resolve(tv);\n        }else{\n          reject({\n            message:TV4_NOT_LOADED_EXCEPTION\n          });\n        }\n      });\n    }\n  }\n\n})(angular,angular.module('diroop.tools').factory,tv4);\n","/**\n  inject\n    angular as ng,\n    angular.module('diroop.tools').factory as factory\n   from global\n**/\n(function(ng,factory){\n  'use strict';\n  /**\n   * @ngdoc service\n   * @name drValidationService\n   * @memberof diroop.tools\n\n   * @requires $q                 - what service can live without $q\n   * @requires $log               - $log all errors\n   * @requires drSchemaLoader     - load schemas\n\n   * @description\n      provides a common libray for validating models aginst schemas\n  **/\n  factory('drValidationService',['$q','$log','drSchemaLoader',_drValidationService]);\n\n  function _drValidationService($q,$log,drSchemaLoader){\n      var MODEL_VALIDATION_FAILED_MESSAGE = 'The model did not validate aginst the schema specified',\n          SCHEMA_INITIALIZATION_EXCEPTION = 'An error occured while the schema was being set up for validation';\n\n      var drValidationService={\n        validate:_validate,\n      };\n\n      return drValidationService;\n      /**\n        * @ngdoc function\n        * @name sdrValidationService.validate\n        *\n        * @description\n          use a schema uri to validate a model\n        @param {string} schema - the path to the schema being used to validate\n        @param {object} model  - the model to be validated\n        * @returns  a promise to resolve true {valid:true} if the model validates or\n          an explaination why\n            {\n                valid:false,\n                message:'---',\n                errors:[...],\n                schema:{...},\n                model:{...},\n            }\n      */\n      function _validate(schema,model){\n        return $q(function(resolve,reject){\n          drSchemaLoader\n            .getSchemaSet(schema)\n            .then(function(schemaSet){\n                var result = schemaSet.tv4.validateMultiple(model, schemaSet.schema);\n                if(result && result.valid){\n                    resolve({\n                      valid:true\n                    });\n                }else{\n                    reject({\n                      valid   : false,\n                      message : MODEL_VALIDATION_FAILED_MESSAGE,\n                      errors  : (result.errors)?result.errors:[],\n                      missing : (result.missing)?result.missing:[],\n                      schema  : schema,\n                      model   : model\n                    });\n                }\n            })\n            .catch(function(error){\n                reject({\n                  message:SCHEMA_INITIALIZATION_EXCEPTION\n                });\n            });\n        });\n      }\n\n  }\n})(angular,angular.module('diroop.tools').factory);\n","(function(ng,component){\n  'use strict';\n  /**\n   * @ngdoc component\n   * @name drToolsVersion\n   * @memberof diroop.tools\n   * @requires $log                - can't live without $log\n   * @requires $filter             - provide access to json filter\n   * @requires drToolsSettings\n                  as settings       - provide access to app settings\n   * @restrict E\n   * @description\n        a directive used to display current diroop tools version\n   * @example\n      <dr:tool:version></dr:tool:version>\n  **/\n  component('drToolVersion',{\n      templateUrl:'drTemplateCache:/version/version.html',\n      controller:['$log','$filter','drToolsSettings','drCacheTreeService',function($log,$filter,settings,drCacheTreeService){\n        var DIROOP_TOOL_VERSION ='diroop.tools : v:version';\n        var _self = this;\n        _self.version=$filter('format')(DIROOP_TOOL_VERSION,{\n            version:settings.getVersion()\n        });\n      }]\n  });\n})(angular,angular.module('diroop.tools').component);\n","(function(ng) {\ntry {\n  app = ng.module('diroop.schema.cache');\n} catch (e) {\n  app = ng.module('diroop.schema.cache', ['diroop.tools']);\n}\napp.run(['drSchemaCache', function(schemaCache) {\n  schemaCache.put('schemaCache:/address/address.schema.json',\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"description\": \"An Address following the convention of http://microformats.org/wiki/hcard\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"post-office-box\": { \"type\": \"string\" },\n        \"extended-address\": { \"type\": \"string\" },\n        \"street-address\": { \"type\": \"string\" },\n        \"locality\":{ \"type\": \"string\" },\n        \"region\": { \"type\": \"string\" },\n        \"postal-code\": { \"type\": \"string\" },\n        \"country-name\": { \"type\": \"string\"}\n    },\n    \"required\": [\"locality\", \"region\", \"country-name\"],\n    \"dependencies\": {\n        \"post-office-box\": [\"street-address\"],\n        \"extended-address\": [\"street-address\"]\n    }\n}\n);\n}]);\n})(angular);\n\n(function(ng) {\ntry {\n  app = ng.module('diroop.schema.cache');\n} catch (e) {\n  app = ng.module('diroop.schema.cache', ['diroop.tools']);\n}\napp.run(['drSchemaCache', function(schemaCache) {\n  schemaCache.put('schemaCache:/person/bad.schema.json',\n{\"$ref\":\"schemaCache:/noWhereToBeFoundOnPurpose.schema.json\"}\n);\n}]);\n})(angular);\n\n(function(ng) {\ntry {\n  app = ng.module('diroop.schema.cache');\n} catch (e) {\n  app = ng.module('diroop.schema.cache', ['diroop.tools']);\n}\napp.run(['drSchemaCache', function(schemaCache) {\n  schemaCache.put('schemaCache:/person/hcard.schema.json',\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"description\": \"A representation of a person, company, organization, or place\",\n    \"type\": \"object\",\n    \"required\": [\"familyName\", \"givenName\"],\n    \"properties\": {\n        \"fn\": {\n            \"description\": \"Formatted Name\",\n            \"type\": \"string\"\n        },\n        \"familyName\": { \"type\": \"string\" },\n        \"givenName\": { \"type\": \"string\" },\n        \"additionalName\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"honorificPrefix\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"honorificSuffix\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n        \"nickname\": { \"type\": \"string\" },\n        \"url\": { \"type\": \"string\", \"format\": \"uri\" },\n        \"email\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": { \"type\": \"string\" },\n                \"value\": { \"type\": \"string\", \"format\": \"email\" }\n            }\n        },\n        \"tel\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": { \"type\": \"string\" },\n                \"value\": { \"type\": \"string\", \"format\": \"phone\" }\n            }\n        },\n        \"adr\": { \"$ref\": \"schemaCache:/address/address.schema.json\" },\n        \"geo\": { \"$ref\": \"schemaCache:/geo/geo.schema.json\" },\n        \"tz\": { \"type\": \"string\" },\n        \"photo\": { \"type\": \"string\" },\n        \"logo\": { \"type\": \"string\" },\n        \"sound\": { \"type\": \"string\" },\n        \"bday\": { \"type\": \"string\", \"format\": \"date\" },\n        \"title\": { \"type\": \"string\" },\n        \"role\": { \"type\": \"string\" },\n        \"org\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"organizationName\": { \"type\": \"string\" },\n                \"organizationUnit\": { \"type\": \"string\" }\n            }\n        }\n    }\n}\n);\n}]);\n})(angular);\n\n(function(ng) {\ntry {\n  app = ng.module('diroop.schema.cache');\n} catch (e) {\n  app = ng.module('diroop.schema.cache', ['diroop.tools']);\n}\napp.run(['drSchemaCache', function(schemaCache) {\n  schemaCache.put('schemaCache:/geo/geo.schema.json',\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"description\": \"A geographical coordinate\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"latitude\": { \"type\": \"number\" },\n        \"longitude\": { \"type\": \"number\" }\n    }\n}\n);\n}]);\n})(angular);\n\n(function(ng) {\ntry {\n  app = ng.module('diroop.schema.cache');\n} catch (e) {\n  app = ng.module('diroop.schema.cache', ['diroop.tools']);\n}\napp.run(['drSchemaCache', function(schemaCache) {\n  schemaCache.put('schemaCache:/really/really/really/deep/test.schema.json',\n{\n    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n    \"description\": \"A geographical coordinate\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"latitude\": { \"type\": \"number\" },\n        \"longitude\": { \"type\": \"number\" }\n    }\n}\n);\n}]);\n})(angular);\n","(function(module) {\ntry {\n  module = angular.module('diroop.tools.templateCache');\n} catch (e) {\n  module = angular.module('diroop.tools.templateCache', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('drTemplateCache:/version/version.html',\n    '<div class=\"dr-version\"><small>{{$ctrl.version}}</small></div>');\n}]);\n})();\n"]}